<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AriBot" xml:space="preserve">
    <value>[Ari Bot]</value>
  </data>
  <data name="AskCity" xml:space="preserve">
    <value>For which city you like to get weather report?</value>
  </data>
  <data name="AskedStoreCard" xml:space="preserve">
    <value>Certainly, can I use your stored Card?</value>
  </data>
  <data name="AskEmail" xml:space="preserve">
    <value>Got it {0}! And can I have your email address please?</value>
  </data>
  <data name="AskHelp" xml:space="preserve">
    <value>Hi {0}. How can I help you today?</value>
  </data>
  <data name="AskName" xml:space="preserve">
    <value>Please leave your name</value>
  </data>
  <data name="AwesomeIdea" xml:space="preserve">
    <value>I am excited about your awesome idea. Tell me more</value>
  </data>
  <data name="ChooseDeals" xml:space="preserve">
    <value>To get started, please choose an option below</value>
  </data>
  <data name="CloseDialog" xml:space="preserve">
    <value>Close the dialog else tell me anything to request for my help again.</value>
  </data>
  <data name="ConfirmNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="ConfirmYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Leave</value>
  </data>
  <data name="FirstAttempBusy" xml:space="preserve">
    <value>Its been long, Waiting for your response!</value>
  </data>
  <data name="Goodbye" xml:space="preserve">
    <value>Thank you and goodbye</value>
  </data>
  <data name="HappyToHelp" xml:space="preserve">
    <value>Awesome! Happy to help you</value>
  </data>
  <data name="Helpful" xml:space="preserve">
    <value>Was I helpful?</value>
  </data>
  <data name="Improve" xml:space="preserve">
    <value>Thank you for your feedback. Could you please tell me a bit on why you didn't like it?</value>
  </data>
  <data name="NeedAnything" xml:space="preserve">
    <value>Is there anything else I can do for you?</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>I am sorry but I could not find what you are looking for. Please try again with a different request.</value>
  </data>
  <data name="proceed" xml:space="preserve">
    <value>How would you like to proceed?</value>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="SearchAgain" xml:space="preserve">
    <value>Search again</value>
  </data>
  <data name="SecondAttempGoodBuy" xml:space="preserve">
    <value>You seems to be busy. Goodbye!</value>
  </data>
  <data name="Sorry" xml:space="preserve">
    <value>I'm sorry, I didn't understand your message. Can you type it again?</value>
  </data>
  <data name="SorryNotFound" xml:space="preserve">
    <value>Sorry, I could not find a match for your search.</value>
  </data>
  <data name="StillInProgress" xml:space="preserve">
    <value>I am still being trained on this feature right now but I will let you know once it is ready</value>
  </data>
  <data name="ThankyouForFeedback" xml:space="preserve">
    <value>Thank you for your feedback. I will consider your comment to further improve my performance.</value>
  </data>
  <data name="ThankyouForNewsLetter" xml:space="preserve">
    <value>Thank you for subscribing to our Newsletters. Amazing articles and other cool stuff are coming. So stay tuned!</value>
  </data>
  <data name="ThankyouForSharing" xml:space="preserve">
    <value>Thanks for that cool idea. We will look into it and get back to you shortly.</value>
  </data>
  <data name="ValidEmail" xml:space="preserve">
    <value>Please enter a valid email address</value>
  </data>
  <data name="WebSearchExpired" xml:space="preserve">
    <value>I am sorry but the free internet search is currently disabled until the first of the following month.</value>
  </data>
</root>