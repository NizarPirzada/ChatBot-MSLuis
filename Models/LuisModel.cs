// <auto-generated>
// Code generated by LUISGen aribot3.json -cs Luis.AriBotLuisClass -o 
// Tool github: https://github.com/microsoft/botbuilder-tools
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
using Newtonsoft.Json;
using System.Collections.Generic;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.AI.Luis;
using System.Linq;
using System;

namespace AriBotV4.Models
{
    public partial class LuisModel : IRecognizerConvert
    {
        [JsonProperty("text")]
        public string Text;

        [JsonProperty("alteredText")]
        public string AlteredText;

        public enum Intent
        {
            FindDealsTravel_Intent,
            FindDealsHotel_Intent,
            FindDealsFood_Intent,
            GreetingIntent,
            Time_Intent,
            Get_Tasks_Intent,
            Create_Task,
            Delete_Task_Intent,
            Edit_Task_Intent,
            Create_Goal_Intent,
            Delete_Goal_Intent,
            Edit_Goal_Intent,
            Weather_Intent,
            News_Intent,
            Images_Intent,
            Web_Search_Intent,
            Get_Goals_Intent,
            None
        };
        [JsonProperty("intents")]
        public Dictionary<Intent, IntentScore> Intents;

        public class _Entities
        {

            // Built-in entities
            public DateTimeSpec[] datetime;

            public GeographyV2[] geographyV2;

            public double[] number;

            // Instance
            public class _Instance
            {
                public InstanceData[] datetime;
                public InstanceData[] geographyV2;
                public InstanceData[] number;
                public InstanceData[] time;
                public InstanceData[] next;
                public InstanceData[] tasks;
                public InstanceData[] task;
                public InstanceData[] priority;
                public InstanceData[] appointment;
                public InstanceData[] appointments;
                public InstanceData[] category;
                public InstanceData[] create;
                public InstanceData[] delete;
                public InstanceData[] edit;
                public InstanceData[] goal;
                public InstanceData[] weather;
                public InstanceData[] news;
                public InstanceData[] images;
                public InstanceData[] schedule;
                public InstanceData[] meeting;
                public InstanceData[] meetings;
                public InstanceData[] Places_AbsoluteLocation;
                public InstanceData[] TaskGoalName;
                public InstanceData[] Status;
                public InstanceData[] WebSearch;
                public InstanceData[] Active;



            }
            [JsonProperty("$instance")]
            public _Instance _instance;
        }
        [JsonProperty("entities")]
        
        public _Entities Entities;

       
        [JsonExtensionData(ReadData = true, WriteData = true)]
        public IDictionary<string, object> Properties { get; set; }

        public void Convert(dynamic result)
        {
            var app = JsonConvert.DeserializeObject<LuisModel>(JsonConvert.SerializeObject(result, 
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }));
            Text = app.Text;
            AlteredText = app.AlteredText;
            Intents = app.Intents;
            Entities = app.Entities;
                        Properties = app.Properties;
           
        }

        public (Intent intent, double score) TopIntent()
        {
               Intent maxIntent = Intent.None;
                var max = 0.0;
            maxIntent =  Intents.FirstOrDefault().Key;
             max = Math.Round(System.Convert.ToDouble(Intents.FirstOrDefault().Value.Score),2) * 100;
            

            //    var intent = Intents.Where(name => name.Value.Score > max).Select(i => new { i.Key, i.Value });
            ////     return(intent.)
            // return (Intents["Intent"], Math.Round(Intents[0].Score.Value,2));




            //foreach (var entry in Intents)
            //{
            //    if (entry.Value.Score > max)
            //    {
            //        maxIntent = entry.Key;
            //        max = Math.Round(entry.Value.Score.Value, 2);
            //    }
            //}
            // return (maxIntent, max);
            return (maxIntent, max);
        }
    }
}
